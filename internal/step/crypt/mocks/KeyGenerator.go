// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	crypto "github.com/ProtonMail/gopenpgp/v2/crypto"
	mock "github.com/stretchr/testify/mock"
)

// KeyGenerator is an autogenerated mock type for the KeyGenerator type
type KeyGenerator struct {
	mock.Mock
}

type KeyGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyGenerator) EXPECT() *KeyGenerator_Expecter {
	return &KeyGenerator_Expecter{mock: &_m.Mock}
}

// GenerateKey provides a mock function with given fields: docId, passphrase
func (_m *KeyGenerator) GenerateKey(docId string, passphrase string) (*crypto.Key, error) {
	ret := _m.Called(docId, passphrase)

	if len(ret) == 0 {
		panic("no return value specified for GenerateKey")
	}

	var r0 *crypto.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*crypto.Key, error)); ok {
		return rf(docId, passphrase)
	}
	if rf, ok := ret.Get(0).(func(string, string) *crypto.Key); ok {
		r0 = rf(docId, passphrase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(docId, passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyGenerator_GenerateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateKey'
type KeyGenerator_GenerateKey_Call struct {
	*mock.Call
}

// GenerateKey is a helper method to define mock.On call
//   - docId string
//   - passphrase string
func (_e *KeyGenerator_Expecter) GenerateKey(docId interface{}, passphrase interface{}) *KeyGenerator_GenerateKey_Call {
	return &KeyGenerator_GenerateKey_Call{Call: _e.mock.On("GenerateKey", docId, passphrase)}
}

func (_c *KeyGenerator_GenerateKey_Call) Run(run func(docId string, passphrase string)) *KeyGenerator_GenerateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *KeyGenerator_GenerateKey_Call) Return(_a0 *crypto.Key, _a1 error) *KeyGenerator_GenerateKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyGenerator_GenerateKey_Call) RunAndReturn(run func(string, string) (*crypto.Key, error)) *KeyGenerator_GenerateKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyGenerator creates a new instance of KeyGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyGenerator {
	mock := &KeyGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
