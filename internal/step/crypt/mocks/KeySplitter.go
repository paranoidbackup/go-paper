// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KeySplitter is an autogenerated mock type for the KeySplitter type
type KeySplitter struct {
	mock.Mock
}

type KeySplitter_Expecter struct {
	mock *mock.Mock
}

func (_m *KeySplitter) EXPECT() *KeySplitter_Expecter {
	return &KeySplitter_Expecter{mock: &_m.Mock}
}

// Split provides a mock function with given fields: keyArmored, shards
func (_m *KeySplitter) Split(keyArmored string, shards int) ([]string, error) {
	ret := _m.Called(keyArmored, shards)

	if len(ret) == 0 {
		panic("no return value specified for Split")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return rf(keyArmored, shards)
	}
	if rf, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = rf(keyArmored, shards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(keyArmored, shards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeySplitter_Split_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Split'
type KeySplitter_Split_Call struct {
	*mock.Call
}

// Split is a helper method to define mock.On call
//   - keyArmored string
//   - shards int
func (_e *KeySplitter_Expecter) Split(keyArmored interface{}, shards interface{}) *KeySplitter_Split_Call {
	return &KeySplitter_Split_Call{Call: _e.mock.On("Split", keyArmored, shards)}
}

func (_c *KeySplitter_Split_Call) Run(run func(keyArmored string, shards int)) *KeySplitter_Split_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *KeySplitter_Split_Call) Return(_a0 []string, _a1 error) *KeySplitter_Split_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeySplitter_Split_Call) RunAndReturn(run func(string, int) ([]string, error)) *KeySplitter_Split_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeySplitter creates a new instance of KeySplitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeySplitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeySplitter {
	mock := &KeySplitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
