// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	crypt "go-paper/go-paper/internal/step/crypt"

	mock "github.com/stretchr/testify/mock"
)

// Encrypter is an autogenerated mock type for the Encrypter type
type Encrypter struct {
	mock.Mock
}

type Encrypter_Expecter struct {
	mock *mock.Mock
}

func (_m *Encrypter) EXPECT() *Encrypter_Expecter {
	return &Encrypter_Expecter{mock: &_m.Mock}
}

// EncryptNewProject provides a mock function with given fields: input
func (_m *Encrypter) EncryptNewProject(input crypt.EncryptNewProjectInput) (*crypt.EncryptOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for EncryptNewProject")
	}

	var r0 *crypt.EncryptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(crypt.EncryptNewProjectInput) (*crypt.EncryptOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(crypt.EncryptNewProjectInput) *crypt.EncryptOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypt.EncryptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(crypt.EncryptNewProjectInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypter_EncryptNewProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptNewProject'
type Encrypter_EncryptNewProject_Call struct {
	*mock.Call
}

// EncryptNewProject is a helper method to define mock.On call
//   - input crypt.EncryptNewProjectInput
func (_e *Encrypter_Expecter) EncryptNewProject(input interface{}) *Encrypter_EncryptNewProject_Call {
	return &Encrypter_EncryptNewProject_Call{Call: _e.mock.On("EncryptNewProject", input)}
}

func (_c *Encrypter_EncryptNewProject_Call) Run(run func(input crypt.EncryptNewProjectInput)) *Encrypter_EncryptNewProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypt.EncryptNewProjectInput))
	})
	return _c
}

func (_c *Encrypter_EncryptNewProject_Call) Return(_a0 *crypt.EncryptOutput, _a1 error) *Encrypter_EncryptNewProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encrypter_EncryptNewProject_Call) RunAndReturn(run func(crypt.EncryptNewProjectInput) (*crypt.EncryptOutput, error)) *Encrypter_EncryptNewProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncrypter creates a new instance of Encrypter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncrypter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Encrypter {
	mock := &Encrypter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
